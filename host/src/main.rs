// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use eth_lc::{
    types::{
        primitives::{ByteVector, U64},
        Bootstrap, Bytes32, GenericUpdate, Header, LightClientHeader,
    },
    LightClientStore,
};
use methods::{GUEST_ELF, GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use ssz_rs::prelude::*;
use std::fs;
use std::io::Read;
use tracing_subscriber::fmt::init;

#[derive(serde::Deserialize)]
pub struct TestCase {
    pub description: String,
    pub init: Bootstrap,
    pub updates: Vec<GenericUpdate>,
}

#[derive(serde::Deserialize, Debug, Clone, Default, SimpleSerialize)]
pub struct TestHeader {
    pub parent_root: U64,
}

#[derive(Debug, SimpleSerialize, Default)]
pub struct Foo {
    pub bar: u32,

    pub baz: u64,
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
    // let contents = include_str!("../../test-data/test.json");
    let mut file = fs::File::open("/home/suraj3404/high/zk/zk-light-client/test-data/test.json").unwrap();
    let mut contents = String::new();
    file.read_to_string(&mut contents).unwrap();
    let this: TestHeader = serde_json::from_str(&contents).unwrap();
    // let init_bootstrap = &test_cases[0].init;
    // let byte: Bytes32 = Bytes32::default();
    // let lc_store = LightClientStore::init( init_bootstrap, byte);

    // println!("header {:?}", header.clone());
    // let this = test_cases[0].init.header.beacon.clone();
    let encoding = serialize(&this).unwrap();
    println!("header {:?}", this);
    println!("encoding {:?}", hex::encode(encoding.clone()));
    let recovered_value: Header = deserialize(&encoding).expect("can deserialize");

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let input: u32 = 15 * u32::pow(2, 27) + 1;
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove(env, GUEST_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(GUEST_ID).unwrap();
}
